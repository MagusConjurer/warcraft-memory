{"version":3,"sources":["components/CharacterCard/index.js","components/CardGroup/index.js","components/MainNav/index.js","components/JumboHeader/index.js","components/ClickyContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","fullSRC","process","image","Card","Img","data-key","onClick","alt","name","src","CharacterGroup","state","characters","shuffleCards","arr","i","length","j","Math","floor","random","k","handleCardClicked","event","preventDefault","key","parseInt","target","getAttribute","index","findIndex","card","id","newArray","slice","clicked","lost","updateCharacters","updateLoseCondition","prevProps","this","setState","CardGroup","map","character","toString","React","Component","MainNav","Navbar","bg","expand","Nav","Link","href","className","Text","score","highScore","JumboHeader","Jumbotron","ClickyContainer","updateScore","bool","restartGame","resetArray","forEach","setTimeout","bind","newScore","oldHigh","newHigh","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.253a28c6.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n  var fullSRC = process.env.PUBLIC_URL + props.image;\n\n  return (\n    <Card>\n      <Card.Img data-key={props[\"data-key\"]} onClick={props.onClick} alt={props.name} src={fullSRC} />\n    </Card>\n  );\n};\n\nexport default CharacterCard;","import React from \"react\";\nimport CardGroup from \"react-bootstrap/CardGroup\";\nimport CharacterCard from \"../CharacterCard\";\nimport \"./style.css\"\n\nclass CharacterGroup extends React.Component {\n  state ={\n    characters: this.props.characters\n  }\n\n  componentDidUpdate(prevProps) {\n    if(prevProps.characters !== this.props.characters) {\n      this.setState({characters: this.props.characters});\n    }\n  }\n\n  // Shuffle the cards\n  shuffleCards = (arr) => {\n    for (let i = arr.length -1; i > 0; i--) {\n      let j = Math.floor(Math.random() * i)\n      let k = arr[i]\n      arr[i] = arr[j]\n      arr[j] = k\n    }\n    return arr;\n  }\n\n  // Check which card was clicked, whether it has previously been clicked, and update from there\n  handleCardClicked = event => {\n    event.preventDefault();\n\n    const key = parseInt(event.target.getAttribute(\"data-key\"));\n    const index = this.state.characters.findIndex(card => card.id === key);\n    const newArray = this.state.characters.slice();\n\n    if(newArray[index].clicked === false && this.props.lost !== true) {\n      newArray[index].clicked = true;\n      this.shuffleCards(newArray);\n      this.props.updateCharacters(newArray);\n    } else {\n      if(this.props.lost === false) {\n        this.props.updateLoseCondition(true);\n      }\n    }\n  }\n\n  \n\n  render() {\n    return (\n      <CardGroup>\n        {this.state.characters.map(character => <CharacterCard\n          key={character.id.toString()}\n          data-key={character.id}\n          onClick={this.handleCardClicked}\n          name={character.name}\n          image={character.image}\n        />)}\n      </CardGroup>\n    )\n  }\n  \n}\n\nexport default CharacterGroup;","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport \"./style.css\";\n\nclass MainNav extends React.Component {\n  render() {\n    return (\n      <Navbar bg=\"dark\" expand=\"lg\">\n        <Nav.Link href=\"https://magusconjurer.github.io/portfolio.html\">Return to Portfolio</Nav.Link>\n        <Nav className=\"ml-auto\">\n          <Navbar.Text>Score: {this.props.score}</Navbar.Text><Navbar.Text>|</Navbar.Text><Navbar.Text>High Score: {this.props.highScore}</Navbar.Text>\n        </Nav>\n      </Navbar>\n    )\n  }\n}\n\nexport default MainNav;","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport \"./style.css\";\n\nclass JumboHeader extends React.Component {\n  render() {\n    return (\n      <Jumbotron>\n        <h3 id=\"status\">{this.props.lost === false && this.props.score >= 0\n          ? [(this.props.score === 24 \n            ? \"You clicked every card once!\"\n            : \"Choose a card, but don't click the same one twice!\")]\n          : \"Oops, you clicked the same card twice! Let's try again.\"}</h3>\n      </Jumbotron>\n    );\n  };\n};\n\nexport default JumboHeader;","import React from \"react\";\nimport CardGroup from \"../CardGroup\";\nimport MainNav from \"../MainNav\";\nimport JumboHeader from \"../JumboHeader\";\nimport characters from \"../../characters.json\";\n\nclass ClickyContainer extends React.Component {\n  constructor(props) {\n    super(props)\n\n    // Bind the this context to the function\n    this.updateCharacters = this.updateCharacters.bind(this);\n    this.updateLoseCondition = this.updateLoseCondition.bind(this);\n\n    // Set the state\n    this.state = {\n      characters,\n      lost: false,\n      score: 0,\n      highScore: 0\n    }\n  }\n  \n  updateCharacters = (arr)  =>{\n    this.setState({\n      characters: arr\n    })\n    this.updateScore();\n  }\n\n  updateLoseCondition = (bool) => {\n    this.setState({\n      lost: bool\n    })\n    this.restartGame(bool);\n  }\n\n  updateScore() {\n    var newScore = 0;\n    const oldHigh = this.state.highScore;\n    var newHigh = 0;\n    this.state.characters.forEach(function(character){\n      if(character.clicked === true) {\n        newScore++\n      }\n    })\n    if(newScore > oldHigh){\n      newHigh = newScore;\n    } else {\n      newHigh = oldHigh;\n    }\n    this.setState({\n      score: newScore,\n      highScore: newHigh\n    })\n  }\n\n  restartGame = (bool) => {\n    if(bool === true) {\n      var resetArray = this.state.characters.slice();\n      resetArray.forEach(function(character){\n        if(character.clicked === true){\n          character.clicked = false;\n        }\n      })\n      setTimeout(function(){\n        this.setState({\n          characters: resetArray,\n          lost: false,\n          score: 0\n        });\n      }.bind(this),3000); \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <MainNav score={this.state.score} highScore={this.state.highScore} />\n        <JumboHeader score={this.state.score} lost={this.state.lost} />\n        <CardGroup {...this.state} updateLoseCondition={this.updateLoseCondition} updateCharacters={this.updateCharacters} />\n    </div>\n    );\n  };\n};\n\nexport default ClickyContainer;","import React from 'react';\nimport ClickyContainer from \"./components/ClickyContainer\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <ClickyContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}